plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.appdistribution'
}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "dev.haenara.sample.firebase.app"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            firebaseAppDistribution {
                releaseNotes = "Firebase 배포 테스트"
                testers = "hamster12345@gmail.com"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // firebase
    implementation platform('com.google.firebase:firebase-bom:26.7.0')
}

// create RELEASE_NOTE.txt file with git logs from last tag
def createReleaseNote() {
    def lastTag = {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        // %h : git revision tag
        // %s : git log message
        // e.g) --format=%s : feat(res): Some description
        // e.g) --format=%h %s : d23ad2f feat(res): Some description
        commandLine('git', 'log', "${lastTag()}..HEAD", '--oneline', '--format=%s')
        standardOutput = stdout
    }
    new File("${rootDir}", "RELEASE_NOTE.txt").text = stdout.toString().trim()
}

// TASK
task _01_createChangeLog(group: '__FirebaseSample__') {
    createReleaseNote()
}
