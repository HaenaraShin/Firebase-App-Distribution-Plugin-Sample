plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.appdistribution'
}

def versionProp = {
    def versionProp = new Properties()
    versionProp.load(new FileInputStream("$project.rootDir/version.properties"))
    versionProp.each { prop ->
        project.ext.set(prop.key, prop.value)
    }
    return versionProp
}

def verCode = {
    def prop = versionProp()
    return Integer.valueOf("${prop['version_code']}")
}

def verName = {
    def prop = versionProp()
    return "${prop['version_name']}"
}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "dev.haenara.sample.firebase.app"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode verCode()
        versionName verName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            firebaseAppDistribution {
                releaseNotesFile = "${rootDir}/RELEASE_NOTE.txt"
                testers = "hamster12345@gmail.com"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // firebase
    implementation platform('com.google.firebase:firebase-bom:26.7.0')

    // Lottie Animation
    implementation 'com.airbnb.android:lottie:3.6.1'
}

// create RELEASE_NOTE.txt file with git logs from last tag
def createReleaseNote() {
    def lastTag = {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        // %h : git revision tag
        // %s : git log message
        // e.g) --format=%s : feat(res): Some description
        // e.g) --format=%h %s : d23ad2f feat(res): Some description
        commandLine 'git', 'log', "${lastTag()}..HEAD", '--oneline', '--format=%s'
        standardOutput = stdout
    }
    def text = stdout.toString().trim()
    new File("${rootDir}", "RELEASE_NOTE.txt").text = text
    return text
}

def gitCommitAndTagVersion(releaseNote, verName) {
    try { exec { commandLine 'git', 'reset', 'HEAD' } } catch(Exception e) { }
    try { exec { commandLine 'git', 'add', "${rootDir}/version.properties" } } catch(Exception e) { }
    try { exec { commandLine 'git', 'commit', '-m', "v${verName} is released\n\n${releaseNote}" } } catch(Exception e) { }
    try {
        exec {
            commandLine 'git', 'tag', "v${verName}"
            commandLine 'git', 'tag', "v${verName}"
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
}

def updateVersionProperties(name, code) {
    def versionProp = new File("${rootDir}", 'version.properties')
    def newVersion = name.substring(0, name.lastIndexOf('.')) +
            ".${Integer.valueOf(name.split('\\.').last()) + 1}"
    versionProp.text = "version_name=${newVersion}\n" +
            "version_code=${code + 1}"
}

// TASK
task updateVersion(group: '_sample_') {
    doLast {
        // check if anything has changed
        def releaseNote = createReleaseNote()
        if (releaseNote.isBlank())
            throw new GradleException('Nothing has changed from last tag.')

        updateVersionProperties(verName(), verCode())
        gitCommitAndTagVersion(releaseNote, verName())
    }
}

task buildAndDistribute(dependsOn: 'updateVersion', group: '_sample_') {
}
buildAndDistribute.dependsOn('tasks')
buildAndDistribute.dependsOn('assemble')
buildAndDistribute.dependsOn('appDistributionUploadDebug')

